library("tdr-jenkinslib")

pipeline {
  agent none

  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are building the file format lambda for")
    string(name: "TO_DEPLOY", description: "The git tag, branch or commit reference to deploy, e.g. 'v123'")
  }

  stages {
    stage("Tag Docker image") {
      agent {
        label "built-in"
      }
      steps {
        script {
          def image = "${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/file-format-build"
          sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com"
          sh "docker pull ${image}:${params.TO_DEPLOY}"
          sh "docker tag ${image}:${params.TO_DEPLOY} ${image}:${params.STAGE}"
          sh "docker push ${image}:${params.STAGE}"

          tdr.postToDaTdrSlackChannel(colour: "good", message: "*file-format-build* :whale: The '${params.TO_DEPLOY}' image has been tagged with '${params.STAGE}' in ECR")
        }
      }
    }
    stage("Run task") {
      agent {
        ecs {
          inheritFrom "aws"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeLambdaRole${params.STAGE.capitalize()}"
        }
      }
      steps {
        script {
          def accountNumber = tdr.getAccountNumberFromStage(params.STAGE)
          sh "python3 /run_task.py ${accountNumber} ${params.STAGE} file_format_build_${params.STAGE} file-format-build-${params.STAGE}"
          tdr.postToDaTdrSlackChannel(colour: "good", message: "*File Format Build* Ran container build task for ${params:STAGE}")
        }
      }
    }
  }
}
