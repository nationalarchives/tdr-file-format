library("tdr-jenkinslib")

def repo = "tdr-file-format"
pipeline {
  agent none

  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are building the file format lambda for")
  }

  stages {
    stage("Push Docker image") {
      agent {
        label "master"
      }
      steps {
        script {
          def imageTag = "${env.MANAGEMENT_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/file-format-build:${params.STAGE}"
          sh "aws ecr get-login --region eu-west-2 --no-include-email | bash"
          sh "docker build -t ${imageTag} ."
          sh "docker push ${imageTag}"
          tdr.postToDaTdrSlackChannel(colour: "good", message: "*File Format Build* :whale: Pushed container for ${params:STAGE} to Docker Hub")
        }
      }
    }
    stage("Run task") {
      agent {
        ecs {
          inheritFrom "aws"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeLambdaRole${params.STAGE.capitalize()}"
        }
      }
      steps {
        script {
          def accountNumber = tdr.getAccountNumberFromStage(params.STAGE)
          sh "python3 /run_task.py ${accountNumber} ${params.STAGE} file_format_build_${params.STAGE} file-format-build-${params.STAGE}"
          tdr.postToDaTdrSlackChannel(colour: "good", message: "*File Format Build* Ran container build task for ${params:STAGE}")
        }
      }
    }
  }
  post {
    failure {
      node('master') {
        script {
          tdr.reportFailedBuildToGitHub(repo)
        }
      }
    }
    success {
      node('master') {
        script {
          tdr.reportSuccessfulBuildToGitHub(repo)
        }
      }
    }
  }
}

